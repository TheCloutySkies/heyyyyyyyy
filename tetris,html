<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tetris</title>
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: #333;
      color: white;
      font-family: "Comic Sans MS", sans-serif;
    }
    canvas {
      border: 2px solid white;
      background-color: black;
    }
  </style>
</head>
<body>

<canvas id="tetris" width="320" height="640"></canvas>

<script>
  const canvas = document.getElementById('tetris');
  const context = canvas.getContext('2d');
  context.scale(20, 20); // Each tetromino block will be 20x20 pixels

  // Tetromino shapes and colors
  const tetrominoes = {
    I: [
      [0, 1, 0, 0],
      [0, 1, 0, 0],
      [0, 1, 0, 0],
      [0, 1, 0, 0]
    ],
    O: [
      [1, 1],
      [1, 1]
    ],
    T: [
      [0, 1, 0],
      [1, 1, 1],
      [0, 0, 0]
    ],
    S: [
      [0, 1, 1],
      [1, 1, 0],
      [0, 0, 0]
    ],
    Z: [
      [1, 1, 0],
      [0, 1, 1],
      [0, 0, 0]
    ],
    J: [
      [1, 0, 0],
      [1, 1, 1],
      [0, 0, 0]
    ],
    L: [
      [0, 0, 1],
      [1, 1, 1],
      [0, 0, 0]
    ]
  };

  // Colors for each tetromino
  const colors = {
    I: 'cyan',
    O: 'yellow',
    T: 'purple',
    S: 'green',
    Z: 'red',
    J: 'blue',
    L: 'orange'
  };

  // Draw a tetromino on the canvas
  function drawMatrix(matrix, offset) {
    matrix.forEach((row, y) => {
      row.forEach((value, x) => {
        if (value !== 0) {
          context.fillStyle = colors[value];
          context.fillRect(x + offset.x, y + offset.y, 1, 1);
        }
      });
    });
  }

  // Create a random tetromino
  function createPiece(type) {
    return tetrominoes[type].map(row => row.slice());
  }

  // Create a new random tetromino
  function createRandomPiece() {
    const pieces = 'IOTSZJL';
    const randomPiece = pieces[Math.floor(Math.random() * pieces.length)];
    return createPiece(randomPiece);
  }

  // Draw the game state (the board and current piece)
  function draw() {
    context.fillStyle = '#000';
    context.fillRect(0, 0, canvas.width, canvas.height);
    drawMatrix(board, { x: 0, y: 0 });
    drawMatrix(player.matrix, player.pos);
  }

  // Check for collisions
  function collide(board, player) {
    const [matrix, offset] = [player.matrix, player.pos];
    for (let y = 0; y < matrix.length; ++y) {
      for (let x = 0; x < matrix[y].length; ++x) {
        if (
          matrix[y][x] !== 0 &&
          (board[y + offset.y] && board[y + offset.y][x + offset.x]) !== 0
        ) {
          return true;
        }
      }
    }
    return false;
  }

  // Merge the current piece into the board
  function merge(board, player) {
    player.matrix.forEach((row, y) => {
      row.forEach((value, x) => {
        if (value !== 0) {
          board[y + player.pos.y][x + player.pos.x] = value;
        }
      });
    });
  }

  // Rotate a tetromino
  function rotate(matrix) {
    for (let y = 0; y < matrix.length; ++y) {
      for (let x = 0; x < y; ++x) {
        [matrix[y][x], matrix[x][y]] = [matrix[x][y], matrix[y][x]];
      }
    }
    matrix.reverse();
  }

  // Move the tetromino
  function move(dir) {
    player.pos.x += dir;
    if (collide(board, player)) {
      player.pos.x -= dir;
    }
  }

  // Drop the tetromino by one row
  function drop() {
    player.pos.y++;
    if (collide(board, player)) {
      player.pos.y--;
      merge(board, player);
      playerReset();
      sweepRows();
    }
    dropCounter = 0;
  }

  // Reset the player position and tetromino
  function playerReset() {
    player.matrix = createRandomPiece();
    player.pos.y = 0;
    player.pos.x = (board[0].length / 2) - (player.matrix[0].length / 2);
    if (collide(board, player)) {
      board.forEach(row => row.fill(0));
    }
  }

  // Clear full rows
  function sweepRows() {
    outer: for (let y = board.length - 1; y >= 0; --y) {
      for (let x = 0; x < board[y].length; ++x) {
        if (board[y][x] === 0) {
          continue outer;
        }
      }
      const row = board.splice(y, 1)[0].fill(0);
      board.unshift(row);
    }
  }

  // Update the game state
  let dropCounter = 0;
  let dropInterval = 1000;
  let lastTime = 0;

  function update(time = 0) {
    const deltaTime = time - lastTime;
    lastTime = time;

    dropCounter += deltaTime;
    if (dropCounter > dropInterval) {
      drop();
    }

    draw();
    requestAnimationFrame(update);
  }

  // Player object
  const player = {
    pos: { x: 0, y: 0 },
    matrix: null
  };

  // Create the board
  const board = Array.from({ length: 20 }, () => Array(10).fill(0));

  // Control input
  document.addEventListener('keydown', event => {
    if (event.key === 'ArrowLeft') {
      move(-1);
    } else if (event.key === 'ArrowRight') {
      move(1);
    } else if (event.key === 'ArrowDown') {
      drop();
    } else if (event.key === 'ArrowUp') {
      rotate(player.matrix);
      if (collide(board, player)) {
        rotate(player.matrix);
        rotate(player.matrix);
        rotate(player.matrix);
      }
    }
  });

  // Start the game
  playerReset();
  update();

</script>

</body>
</html>
